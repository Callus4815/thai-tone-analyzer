#!/usr/bin/env python3
"""
Comprehensive test script for Thai tone analysis algorithm.
Tests all the specific words mentioned by the user.
"""

import requests
import json

def test_word(word, expected_tone=None):
    """Test a single word and return the result."""
    try:
        response = requests.post(
            'http://localhost:5001/analyze',
            headers={'Content-Type': 'application/json'},
            json={'word': word},
            timeout=5
        )
        
        if response.status_code == 200:
            result = response.json()
            actual_tone = result.get('tone', 'Unknown')
            tone_correct = expected_tone is None or actual_tone == expected_tone
            
            return {
                'word': word,
                'success': True,
                'tone': actual_tone,
                'expected_tone': expected_tone,
                'tone_correct': tone_correct,
                'explanation': result.get('explanation', ''),
                'syllables': result.get('syllables', []),
                'romanized': result.get('romanized', ''),
                'translation': result.get('translation', '')
            }
        else:
            return {
                'word': word,
                'success': False,
                'error': f'HTTP {response.status_code}',
                'expected_tone': expected_tone
            }
    except Exception as e:
        return {
            'word': word,
            'success': False,
            'error': str(e),
            'expected_tone': expected_tone
        }

# Test data with expected tones
test_cases = [
    # Words without tone marks (default tones)
    ("‡∏°‡∏≤", "Mid"),  # mid tone
    ("‡∏ú‡∏°", "Low"),  # rising tone  
    ("‡∏û‡πà‡∏≠", "Falling"),  # falling tone (long vowel, stop final)
    ("‡∏™‡∏∞", "High"),  # high tone (short vowel)
    ("‡∏´‡∏°‡∏≠", "Rising"),  # rising tone
    
    # Words with tone marks (explicit tones)
    ("‡∏Å‡πà‡∏≤", "Low"),  # low tone (mai ek, low class)
    ("‡∏Ç‡πà‡∏≤", "Low"),  # low tone (mai ek, high class)
    ("‡πÄ‡∏Å‡πâ‡∏≤", "Falling"),  # falling tone (mai tho)
    ("‡∏Å‡πã‡∏≤", "Rising"),  # rising tone (mai chattawa)
    ("‡∏Å‡πä‡∏≤", "High"),  # high tone (mai tri)
    
    # All vowels with sample consonants (mid-class "‡∏Å")
    ("‡∏Å‡∏∞", "Low"), ("‡∏Å‡∏≤", "Mid"),
    ("‡∏Å‡∏¥", "Low"), ("‡∏Å‡∏µ", "Mid"),
    ("‡∏Å‡∏∂", "Low"), ("‡∏Å‡∏∑‡∏≠", "Mid"),
    ("‡∏Å‡∏∏", "Low"), ("‡∏Å‡∏π", "Mid"),
    ("‡πÄ‡∏Å‡∏∞", "Low"), ("‡πÄ‡∏Å", "Low"),
    ("‡πÅ‡∏Å‡∏∞", "Low"), ("‡πÅ‡∏Å", "Low"),
    ("‡πÇ‡∏Å‡∏∞", "Low"), ("‡πÇ‡∏Å", "Low"),
    ("‡πÄ‡∏Å‡∏≤‡∏∞", "Mid"), ("‡∏Å‡∏≠", "Mid"),
    ("‡πÄ‡∏Å‡∏≠‡∏∞", "Low"), ("‡πÄ‡∏Å‡∏≠", "Low"),
    ("‡πÄ‡∏Å‡∏µ‡∏¢‡∏∞", "Low"), ("‡πÄ‡∏Å‡∏µ‡∏¢", "Mid"),
    ("‡πÄ‡∏Å‡∏∑‡∏≠‡∏∞", "Low"), ("‡πÄ‡∏Å‡∏∑‡∏≠", "Mid"),
    ("‡∏Å‡∏±‡∏ß‡∏∞", "Low"), ("‡∏Å‡∏±‡∏ß", "Mid"),
    ("‡∏§", "Low"), ("‡∏§‡πÖ", "Mid"),
    ("‡∏¶", "Low"), ("‡∏¶‡πÖ", "Mid"),
]

print("üß™ Comprehensive Thai Tone Analysis Test Suite")
print("=" * 60)

all_results = []
correct_tones = 0
total_tests = 0

for word, expected_tone in test_cases:
    result = test_word(word, expected_tone)
    all_results.append(result)
    total_tests += 1
    
    if result['success']:
        if result['tone_correct']:
            correct_tones += 1
            status = "‚úÖ"
        else:
            status = "‚ö†Ô∏è"
        print(f"{status} {word:8} ‚Üí {result['tone']:8} (expected: {expected_tone})")
    else:
        print(f"‚ùå {word:8} ‚Üí ERROR: {result['error']}")

print(f"\nüìä Results Summary:")
print(f"Total tests: {total_tests}")
print(f"Successful requests: {sum(1 for r in all_results if r['success'])}")
print(f"Correct tones: {correct_tones}")
print(f"Tone accuracy: {(correct_tones/total_tests)*100:.1f}%")

# Show incorrect tones
incorrect_tones = [r for r in all_results if r['success'] and not r['tone_correct']]
if incorrect_tones:
    print(f"\n‚ö†Ô∏è  Incorrect tones ({len(incorrect_tones)}):")
    for result in incorrect_tones:
        print(f"  {result['word']}: got '{result['tone']}', expected '{result['expected_tone']}'")

# Show failed requests
failed_requests = [r for r in all_results if not r['success']]
if failed_requests:
    print(f"\n‚ùå Failed requests ({len(failed_requests)}):")
    for result in failed_requests:
        print(f"  {result['word']}: {result['error']}")

print(f"\n‚úÖ Test completed!")
